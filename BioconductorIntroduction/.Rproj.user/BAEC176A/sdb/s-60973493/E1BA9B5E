{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Sequences In Bioconductor\"\nauthor: \"Rockefeller University, Bioinformatics Resource Centre\"\ndate: \"http://rockefelleruniversity.github.io/SequencesInBioconductor/\"\noutput: \n  xaringan::moon_reader:\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n  html_document:\n    toc: true # table of content true\n    toc_float: yes\n    depth: 3  # upto three depths of headings (specified by #, ## and ###)\n    number_sections: false  ## if you want number sections at each table header\n    theme: united  # many options for theme, this one is my favorite.\n    highlight: tango  # specifies the syntax highlighting style\n\n\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nAsSlides <- TRUE\n```\n\n\n# Genomic Sequences\n\nAs we have seen earlier, genomic sequences are often stored in FASTA format.\n\n<div align=\"center\">\n<img src=\"imgs/fasta.png\" alt=\"igv\" height=\"400\" width=\"400\">\n</div>\n\n\n---\n\n# Genomic Sequences in Bioconductor.\n\nGenomic sequences can be handled in Bioconductor using the functions in the **Biostrings** package and full genome sequences for many model organisms are contained within the **BSgenome** packages.\n\n---\n\n# BSgenome packages.\n\nTo make use of a BSgenome package we must first install and load the library.\n\nThe resulting BSgenome object (here BSgenome.Mmusculus.UCSC.mm10) contains the full genome sequence for the model organism.\n\n```{r load, echo=TRUE,eval=FALSE}\nlibrary(BSgenome.Mmusculus.UCSC.mm10)\nclass(BSgenome.Mmusculus.UCSC.mm10)\n```\n\n```{r load1, echo=FALSE,eval=TRUE}\nsuppressPackageStartupMessages(library(BSgenome.Mmusculus.UCSC.mm10))\nclass(BSgenome.Mmusculus.UCSC.mm10)\n```\n---\n\n```{r theObject, echo=TRUE,eval=TRUE,collapse=FALSE}\nBSgenome.Mmusculus.UCSC.mm10\n```\n---\n# Data in BSgenome objects.\n\nSimply by typing object in we have retrieved some important information.\n\nImportantly it tells us how we can access information in the object.\n\n- **seqnames()** function to retrieve all contig names.\n- **$** and **[[]]** accessors to retrieve a given contig's sequence.\n---\n# Contig names.\n\nWe can retrieve contig names using **seqnames()** function.\n\n```{r contignames, echo=TRUE,eval=TRUE,collapse=FALSE}\ncontigNames <- seqnames(BSgenome.Mmusculus.UCSC.mm10)\ncontigNames[1:22]\n```\n---\n\n# Contig lengths\n\nWe can also retrieve contig lengths using **seqlengths()** function.\n\n```{r contiglengths, echo=TRUE,eval=TRUE,collapse=FALSE}\ncontigLengths <- seqlengths(BSgenome.Mmusculus.UCSC.mm10)\ncontigLengths[1:4]\n```\n\n---\n\n# Retreiving sequence information.\n\nNow we know sequence names, we can retrieve sequence information using either the **$** or **[[]]** accessors.\n\nHere we use the data.frame and list accessor **$** with name of contig of interest\n```{r access, echo=TRUE,eval=TRUE,collapse=FALSE}\nchr19_Seq <- BSgenome.Mmusculus.UCSC.mm10$chr19\nchr19_Seq\n```\n---\n# Retreiving sequence information.\n\n\nnow we use list accessor **[[]]** with name of contig of interest\n```{r access2, echo=TRUE,eval=TRUE,collapse=FALSE}\nchr19_Seq <- BSgenome.Mmusculus.UCSC.mm10[[\"chr19\"]]\nchr19_Seq\n```\n\n---\n\n# Biostrings and DNAstring\n\nThe returned sequence object is a **DNAstring** object from the **Biostrings** package. DNAstrings are efficient objects for storing and accessing large sequences.\n\n```{r dnastring, echo=TRUE,eval=TRUE,collapse=FALSE}\nclass(chr19_Seq)\n```\n\n**?DNAstring** for full help on DNAstring objects.\n---\n\n# Subsetting a DNAstring set \n\nWe can subset a DNAstring object just like indexing a normal vector\n\n```{r dnastringSub, echo=TRUE,eval=TRUE,collapse=FALSE}\nchr19_Seq[1:10000000]\n```\n\n---\n\n# Subsetting a DNAstring set \n\nOr we can use the Biostrings function **subseq()** on our DNAstring.\n\nNote that **subseq()** is a faster implementation of subsetting for DNAstring objects.\n\n```{r dnastringSub2, echo=TRUE,eval=TRUE,collapse=FALSE}\nsubseq(chr19_Seq,start=1,end=10000000)\n```\n\n---\n\n# Useful functions.\n\nThe Biostrings package has many useful functions for handling sequence data.\n\nWe can review the frequency of bases using the **alphabetFrequency()** function.\n\n```{r dnastringSub3, echo=TRUE,eval=TRUE,collapse=FALSE}\nalphabetFrequency(chr19_Seq)\n```\n\n---\n\n# Useful functions.\n\nWe can get the complement,reverse and reverse complement of sequence using the **complement()**, **reverse()**, **reverseComplement()**.\n\n```{r dnastringSub4, echo=TRUE,eval=TRUE,collapse=FALSE}\nchr19_SeqComp <- complement(chr19_Seq)\nchr19_SeqRev <- reverse(chr19_Seq)\nchr19_SeqRevComp <- reverseComplement(chr19_Seq[10000000:10000010])\nchr19_Seq[10000000:10000010]\nchr19_SeqRevComp\n```\n\n---\n\n# Useful functions.\n\nWe can get also match and count the occurrence of patterns in our sequence using **matchPattern()** and **countPattern()**.\n\nWe will look more in depth at these later in the course.\n\n```{r dnastringSub5, echo=TRUE,eval=TRUE,collapse=FALSE}\nchr19_Count <- countPattern(pattern=\"ATCTGCAATG\",chr19_Seq)\nchr19_Count\n```\n\n---\n\n#Writing to a FASTA file.\n\nThe **Biostrings** package contains useful functions to read and write to a FASTA file.\n\nTo write our DNAString object to a FASTA file we can use the **writeXStringSet()** function. \n\nFirst we will convert our DNAString to a DNAStringSet object using the **DNAStringSet()** function and set names using the **names()** function.\n\n\n```{r dnastringSub611, echo=TRUE,eval=FALSE,collapse=FALSE}\nchr19_SeqSet <- DNAStringSet(chr19_Seq[10000000:10000010])\nnames(chr19_SeqSet) <- \"chr19\"\nwriteXStringSet(chr19_SeqSet,filepath = \"Data/chr19_Seq.fa\")\n\n```\n\n```{r dnastringSub61s1, echo=FALSE,eval=TRUE,collapse=FALSE}\nchr19_SeqSet <- DNAStringSet(chr19_Seq[10000000:10000010])\nnames(chr19_SeqSet) <- \"chr19\"\nwriteXStringSet(chr19_SeqSet,filepath = \"../../Data/chr19_Seq.fa\")\n\n```\n\n---\n\n#Reading a FASTA file.\n\nNow we can read our a FASTA file back to DNAStringSet object using the **readDNAStringSet()** function. \n\nWe can access our DNAString from the DNAStringSet object again using **$** and **[[]]** functions.\n\n\n```{r dnastringSub62, echo=TRUE,eval=FALSE,tidy=TRUE}\nchr19_FromFASTA <- readDNAStringSet(filepath = \"Data/chr19_Seq.fa\" )\nchr19_FromFASTA$chr19\n```\n\n```{r dnastringSubxzz62, echo=FALSE,eval=TRUE,tidy=TRUE}\nchr19_FromFASTA <- readDNAStringSet(filepath = \"../../Data/chr19_Seq.fa\" )\nchr19_FromFASTA$chr19\n```\n\n\n---\n\n# Time for an exercise.\n\n[Link_to_exercises](../../exercises/fastaAndBiostrings_exercises.html)\n\n[Link_to_answers](../../answers/fastaAndBiostrings_answers.html)\n\n\n",
    "created" : 1522624036672.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2513300361",
    "id" : "E1BA9B5E",
    "lastKnownWriteTime" : 1522625043,
    "last_content_update" : 1522625043731,
    "path" : "~/Projects/Software/Github/Bioconductor_Introduction/r_course/presentations/slides/SequencesInBioconductor.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}