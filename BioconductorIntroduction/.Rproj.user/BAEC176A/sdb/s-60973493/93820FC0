{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to Plotting\"\nauthor: \"Rockefeller University, Bioinformatics Resource Centre\"\ndate: \"http://rockefelleruniversity.github.io/Plotting_In_R/\"\noutput: \n  xaringan::moon_reader:\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n  html_document:\n    toc: true # table of content true\n    toc_float: yes\n    depth: 3  # upto three depths of headings (specified by #, ## and ###)\n    number_sections: false  ## if you want number sections at each table header\n    theme: united  # many options for theme, this one is my favorite.\n    highlight: tango  # specifies the syntax highlighting style\n\n\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nAsSlides <- TRUE\n```\n\n\n\n# Plotting in R (Base graphics)\n##Introduction\n\nR has excellent graphics and plotting capabilities. They are mostly found in following three sources.\n + base graphics\n + the lattice package\n +  the ggplot2 package\n \nBase R graphics uses a pen and paper model for plotting while Lattice and ggplot2 packages are built on the routines first used in grid graphics.\n\n---\n\n## Line Charts\n\nFirst we'll produce a very simple graph using the values in a treatment vector:\n\n```{r}\ntreatment <- c(0.02,1.8, 17.5, 55,75.7, 80)\n```\n\n---\n##Line Plot\n\nNow we plot the treatment vector with default parameters\n\n```{r,eval=FALSE}\nplot(treatment)\n```\n\n\n\n```{r, echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nplot(treatment)\n```\n\n---\nNow, let's add a title, a line to connect the points, and some color:\n\nHere we plot treatment using blue points overlayed by a line\n\n```{r,eval=TRUE}\nplot(treatment, type=\"o\", col=\"blue\",main=\"Treatment\")\n```\n\n---\n\nCreate a title with a red, bold/italic font\n```{r,eval=FALSE}\ntitle(main=\"Treatment\", col.main=\"red\", font.main=4)\n```\n\n```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nplot(treatment, type=\"o\", col=\"blue\")\ntitle(main=\"Treatment\", col.main=\"red\", font.main=4)\n```\n\n---\nNow let's add a red line for a control vector and specify the y-axis range directly so it will be large enough to fit the data:\n\nDefine control vector\n```{r,eval=TRUE,collapse=TRUE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\ncontrol <- c(0, 20, 40, 60, 80,100)\nplot(treatment, type=\"o\", col=\"blue\", ylim=c(0,100))\nlines(control, type=\"o\", pch=22, lty=2, col=\"red\")\n```\n\n---\nPut it all together\n```{r,echo=TRUE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nplot(treatment, type=\"o\", col=\"blue\", ylim=c(0,100))\nlines(control, type=\"o\", pch=22, lty=2, col=\"red\")\ntitle(main=\"Expression Data\", col.main=\"red\", font.main=4)\n```\n\n---\n\nNext let's change the axes labels to match our data and add a legend. We'll also compute the y-axis values using the max function \nso any changes to our data will be automatically reflected in our graph. \n\nCalculate range from 0 to max value of data\n```{r}\ng_range <- range(0, treatment, control)\n```\n\nrange() returns a vector containing the minimum and maximum of all the given arguments.\n\n---\n\nPlot treatment using y axis that ranges from 0 to max value in treatment or control vector.  Turn off axes and annotations (axis labels) so we can specify them ourselves.\n\n```{r,eval=TRUE}\nplot(treatment, type=\"o\", col=\"blue\", \n     ylim=g_range,axes=FALSE, ann=FALSE)\n```\n\n---\n\nMake x axis using labels\n```{r,eval=FALSE}\naxis(1, at=1:6, lab=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\n```\n\n```{r,eval=TRUE,echo=FALSE}\nplot(treatment, type=\"o\", col=\"blue\", \n     ylim=g_range,axes=FALSE, ann=FALSE)\naxis(1, at=1:6, lab=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\n\n```\n\n---\n\nMake y axis with horizontal labels that display ticks at every 20 marks. \n\n```{r,eval=FALSE}\naxis(2, las=1, at=20*0:g_range[2])\n```\n\n```{r,eval=TRUE,echo=FALSE}\nplot(treatment, type=\"o\", col=\"blue\", \n     ylim=g_range,axes=FALSE, ann=FALSE)\naxis(1, at=1:6, lab=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\naxis(2, las=1, at=20*0:g_range[2])\n\n```\n\n---\n\nCreate box around plot\n```{r,eval=FALSE}\nbox()\n```\n\n```{r,eval=TRUE,echo=FALSE}\nplot(treatment, type=\"o\", col=\"blue\", \n     ylim=g_range,axes=FALSE, ann=FALSE)\naxis(1, at=1:6, lab=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\naxis(2, las=1, at=20*0:g_range[2])\nbox()\n```\n\n\n---\n\nAdd control data, main title and x/y axis titles\n\n```{r,eval=FALSE,echo=TRUE,collapse=TRUE}\nlines(control, type=\"o\", pch=22, lty=2, col=\"red\")\ntitle(main=\"Data\", col.main=\"red\", font.main=4)\ntitle(xlab=\"Days\", col.lab=rgb(0,0.5,0))\ntitle(ylab=\"Values\", col.lab=rgb(0,0.5,0))\n```\n\n```{r,eval=TRUE,echo=FALSE,collapse=TRUE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nplot(treatment, type=\"o\", col=\"blue\", \n     ylim=g_range,axes=FALSE, ann=FALSE)\naxis(1, at=1:6, lab=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\naxis(2, las=1, at=20*0:g_range[2])\nbox()\nlines(control, type=\"o\", pch=22, lty=2, col=\"red\")\ntitle(main=\"Data\", col.main=\"red\", font.main=4)\ntitle(xlab=\"Days\", col.lab=rgb(0,0.5,0))\ntitle(ylab=\"Values\", col.lab=rgb(0,0.5,0))\n```\n---\n\n\nCreate a legend at (1, g_range[2]) that is slightly smaller (cex) and uses the same line colors and points used by the actual plots \n\n```{r,eval=FALSE}\nlegend(1, g_range[2], c(\"treatment\",\"control\"), cex=0.8,\n       col=c(\"blue\",\"red\"), pch=21:22, lty=1:2);  \n```\n\n```{r,echo=FALSE,fig.width=8,fig.height=3.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nplot(treatment, type=\"o\", col=\"blue\", ylim=g_range,axes=FALSE, ann=FALSE)\naxis(1, at=1:6, lab=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\naxis(2, las=1, at=20*0:g_range[2])\nbox()\n\nlines(control, type=\"o\", pch=22, lty=2, col=\"red\")\ntitle(main=\"Data\", col.main=\"red\", font.main=4)\ntitle(xlab=\"Days\", col.lab=rgb(0,0.5,0))\ntitle(ylab=\"Values\", col.lab=rgb(0,0.5,0))\nlegend(1, g_range[2], c(\"treatment\",\"control\"), cex=0.8, col=c(\"blue\",\"red\"), pch=21:22, lty=1:2);  \n```\n---\n\n##Bar Charts\t\n\t\n\t\n\nLet's start with a simple bar chart graphing the treatment vector: \nPlot treatment\n\n```{r,eval=FALSE}\nbarplot(treatment)\n```\n\n```{r,echo=FALSE,fig.width=8,fig.height=4,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nbarplot(treatment)\n```\n\n---\n \nLet's now read the data from the example.txt data file, add labels, blue borders around the bars, and density lines: \n\nRead values from tab-delimited example.txt\n```{r}\ndata <- read.table(\"data/example.txt\", header=T, sep=\"\\t\")\n```\n\n---\n\n**names.arg**  is a vector of names to be plotted below each bar or group of bars. \n\n**density** is\ta vector giving the density of shading lines, in lines per inch, for the bars or bar components.\n\n\n```{r,eval=TRUE,fig.width=8,fig.height=4,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nbarplot(data$treatment, main=\"Treatment\", xlab=\"Days\",ylab=\"values\", \n        names.arg=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"), \n        border=\"blue\", density=c(10,20,30,40,50,60))\n```\n\n\n---\nNow we can Graph data with adjacent bars using colors and place the legend at the top-left corner with no frame\n\n\n```{r,eval=FALSE}\nbarplot(as.matrix(data), main=\"Data\", ylab= \"Total\", beside=TRUE, \n        col= c(\"lightblue\", \"mistyrose\", \"lightcyan\",\"lavender\",\n               \"cornsilk\",\"maroon\"))\nlegend(\"topleft\", c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"), cex=0.8,\n       bty=\"n\", fill=  c(\"lightblue\", \"mistyrose\", \"lightcyan\",\n                         \"lavender\",\"cornsilk\",\"maroon\"));\n```\n\n\n```{r,echo=FALSE,fig.width=8,fig.height=3,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nbarplot(as.matrix(data), main=\"Data\", ylab= \"Total\", beside=TRUE, col= c(\"lightblue\", \"mistyrose\", \"lightcyan\",\"lavender\", \"cornsilk\",\"maroon\"))\nlegend(\"topleft\", c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"), cex=0.8,bty=\"n\", \nfill=  c(\"lightblue\", \"mistyrose\", \"lightcyan\",\"lavender\", \"cornsilk\",\"maroon\"));\n\n```\n\n---\n\n##Histograms\n\n\nLet's start with a simple histogram plotting the distribution of the treatment vector: \n\nCreate a histogram for treatment\n\n```{r,echo=TRUE,fig.width=8,fig.height=3,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nhist(treatment)  \n```\n\n\n---\n\nConcatenate the three vectors\n\n```{r}\nall <- c(data$control, data$treatment)\n```\n\nCreate a histogram for data in light blue with the y axis ranging from 0-10\n```{r,eval=FALSE}\nhist(all, col=\"lightblue\", ylim=c(0,10))\n```\n\n```{r,echo=FALSE,fig.width=5,fig.height=3,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nhist(all, col=\"lightblue\", ylim=c(0,10))\n```\n---\n\n\nNow we can configure the groups in the histogram using the **breaks** parameter.\n\nFor **breaks** we must supply a single number giving the number of cells for the histogram or the open intervals as a vector.\n\nCompute the largest value used in the data\n\n```{r}\nmax_num <- max(all)\n```\n\n---\n\nHere we create a histogram setting breaks so each number is in its own group and make the x axis range from 0-max_num.\n\n\n```{r,eval=TRUE,fig.width=5,fig.height=3,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nhist(all, col=heat.colors(max_num), breaks=max_num, \n     xlim=c(0,max_num),main=\"Histogram\", las=1)\t\n```\n\n\n---\n\nHere we set the **freq** parameter to be FALSE for probability densities instead of TRUE for the histogram graphic to be a representation of frequencies.\n\n```{r,echo=TRUE,fig.width=4,fig.height=3,dpi=300,out.width=\"1920px\",height=\"1080px\"}\n\nhist(all,breaks=max_num,xlim=c(0,max_num), \n     main=\"Probability Density\",las=1, cex.axis=0.8, freq=F)\n```\n\n---\n##Pie Charts\n\n\nLet's start with a simple pie chart graphing the treatment vector: \n Create a pie chart for treatment\n```{r,eval=FALSE}\npie(treatment)\n```\n\n```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\npie(treatment)\n```\n\n---\n\nNow let's add a heading, change the colours, and define our own labels: \n\nCreate a pie chart with defined heading and  custom colours and labels\n```{r,eval=FALSE}\npie(treatment, main=\"Treatment\", col= c(\"lightblue\", \"mistyrose\",\n                                        \"lightcyan\",\"lavender\", \n                                        \"cornsilk\",\"maroon\"),\n    labels=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"))\t\n```\n\n```{r,echo=FALSE,fig.width=5,fig.height=3,dpi=300,out.width=\"1920px\",height=\"1080px\"}\npie(treatment, main=\"Treatment\", col= c(\"lightblue\", \"mistyrose\", \"lightcyan\",\"lavender\", \"cornsilk\",\"maroon\"),labels=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"),cex=1)  \n```\n\n---\n\nNow let's change the colours, label using percentages, and create a legend: \n\nDefine some colours ideal for black & white print\n```{r}\ncolors <- c(\"white\",\"grey70\",\"grey90\",\"grey50\",\"black\")\n```\n\nCalculate the percentage for each day, rounded to one decimal place\n```{r}\ntreatment_labels <- round(treatment/sum(treatment) * 100, 1)\n```\n\nConcatenate a '%' char after each value\n```{r}\ntreatment_labels <- paste(treatment_labels, \"%\", sep=\"\")\n```\n\n---\n\nCreate a pie chart with defined heading and custom colors and labels\n\n```{r,eval=FALSE}\npie(treatment, main=\"treatment\", col=colors, labels= treatment_labels,\n    cex=0.8)\n```\n\nCreate a legend at the right   \n```{r,eval=FALSE}\nlegend(1.5, 0.5, c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"), cex=0.8,\n       fill=colors)\t\n```\n\n\n```{r,echo=FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\npie(treatment, main=\"treatment\", col=colors, labels= treatment_labels,cex=0.8)\nlegend(1.5, 0.5, c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"), cex=0.8,fill=colors)  \n```\n\n---\n\n##Dot charts\n\nLet's start with a simple dot chart graphing the data: \n\nHere we use the function **t** to return the transpose of a matrix.\n```{r,eval=FALSE}\ndotchart(t(data))\t\n```\n```{r,echo=FALSE,fig.width=8,fig.height=4,dpi=300,out.width=\"1920px\",height=\"1080px\"}\ndotchart(t(data))  \n```\n\n---\n\nLet's make the dotchart a little more colorful: \n\nNow we create a colored dotchart for autos with smaller labels\n```{r,eval=FALSE}\ndotchart(t(data), color=c(\"red\",\"blue\",\"darkgreen\"),\n         main=\"Dotchart\", cex=0.8)\t\n```\n```{r,echo=FALSE,fig.width=6,fig.height=3.5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\ndotchart(t(data), color=c(\"red\",\"blue\",\"darkgreen\"),main=\"Dotchart\", cex=0.8)  \n```\n\n---\n\n##Box plots\n\nThe final plot we will look at is a box and whisker plot. \n\nBoxplots allow you to quickly review data distributions, showing the median and 1st/3rd quartile.\n\n![](imgs/box_whisker_describe.png)\n\n---\n\nFirst lets read in the gene expression data\n```{r,eval=T,fig.width=6,fig.height=5,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nexprs <- read.delim(\"data/gene_data.txt\",sep=\"\\t\",h=T,row.names = 1)\nhead(exprs)\n```\n\n---\n\nNow we can use the **boxplot()** function on our data.frame to get our boxplot\n```{r,eval=T,fig.width=6,fig.height=4,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nboxplot(exprs)\n```\n\n---\n\nPerhaps it would look better on a log scale. We can add addition colours and labels as with other plots.\n\n```{r,eval=T,fig.width=6,fig.height=4,dpi=300,out.width=\"1920px\",height=\"1080px\"}\nboxplot(log2(exprs),ylab=\"log2 Expression\",\n        col=c(\"red\",\"red\",\"blue\",\"blue\"))\n```\n\n---\n##Combining Plots\n\nR makes it easy to combine multiple plots into one overall graph, using either the **par( )** or **layout( )** function. \nWith the **par( )** function, you can include the option mfrow=c(nrows, ncols) to create a matrix of nrows x ncols plots that are filled in by row.\nmfcol=c(nrows, ncols) fills in the matrix by columns.\n\nDefine a layout with 2 rows and 2 columns\n\n```{r,eval=FALSE}\npar(mfrow=c(2,2))\n```\n\n---\n\nHere, we will use different dataset with two columns each for treated and untreated samples.\n\n```{r}\ndata1 <- read.table(\"data/gene_data.txt\", header=T, sep=\"\\t\")\nhead(data1)\n```\n---\n\nPlot histograms for different columns in the data frame separately. This is not very efficient. \nYou could also do it more efficiently using for loop.\n\n```{r,eval=FALSE}\npar(mfrow=c(2,2))\nhist(data1$Untreated1)\nhist(data1$Treated2)\nhist(data1$Untreated2)\nboxplot(data1$Treated1)\n```\n\n```{r,echo=FALSE,fig.width=8,fig.height=5,dpi=300,out.width=\"490px\",height=\"270px\"}\npar(mfrow=c(2,2))\nhist(data1$Untreated1)\nhist(data1$Treated2)\nhist(data1$Untreated2)\nboxplot(data1$Treated1)\n```\n\n---\n##Saving your plots\n\n\n\nThere are many different ways of saving your plots in R. \n\nThe only argument you would need is name of file in which you want to save the plot.\n\nPlotting commands then can be entered as usual.\nThe output would be redirected to the file. \n\nWhen you're done with your plotting commands, enter the dev.off() command. \n\n```{r,eval=FALSE}\nbmp(filename, width = 480, height = 480, units = \"px\", \n    point-size = 12)\njpeg(filename, width = 480, height = 480, units = \"px\", \n     point-size = 12, quality = 75)\n```\n---\n\nSaving in bitmap format\n```{r,eval=FALSE}\nbmp(file = \"control.bmp\")\nplot(control)\ndev.off()\n```\n---\nSaving in jpeg format\n```{r,eval=FALSE}\njpeg(file = \"control.jpg\", quality = 20)\nplot(control)\ndev.off()\n```\n\n---\n\nSaving in postscript format\n\n```{r,eval=FALSE}\npostscript(file = \"control.ps\")\nplot(control)\ndev.off()\n```\n\n---\nsaving in pdf format\n\n```{r,eval=FALSE}\n\npdf(file = \"control.pdf\", paper = \"A4\")\nplot(control)\ndev.off()\n```\n\n\n---\n\nExercise on base plotting can be found [here](../../exercises/Plotting_exercise.html)\n\n---\n\nAnswers for baseplotting can be found [here](../../answers/Plotting_answers.html)\n\n---",
    "created" : 1521402629523.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3716274847",
    "id" : "93820FC0",
    "lastKnownWriteTime" : 1521418475,
    "last_content_update" : 1521418475,
    "path" : "~/Projects/Software/Github/New_RUPlotting_In_R/r_course/basePlotting.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}