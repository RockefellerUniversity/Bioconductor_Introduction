{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to ggplot2\"\nauthor: \"Rockefeller University, Bioinformatics Resource Centre\"\ndate: \"http://rockefelleruniversity.github.io/Plotting_In_R/\"\noutput: \n  xaringan::moon_reader:\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n  html_document:\n    toc: true # table of content true\n    toc_float: yes\n    depth: 3  # upto three depths of headings (specified by #, ## and ###)\n    number_sections: false  ## if you want number sections at each table header\n    theme: united  # many options for theme, this one is my favorite.\n    highlight: tango  # specifies the syntax highlighting style\n\n\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nAsSlides <- TRUE\n```\n\n\n# Graphics in R\n\nThe R language has extensive graphical capabilities.\n\nGraphics in R may be created by many different methods including base graphics and more advanced plotting packages such as lattice.\n\n![](imgs/plotsinR.jpg)\n\n---\n\nThe ggplot2 package was created by Hadley Wickham and provides a intuitive plotting system to rapidly generate publication quality graphics.\n\nggplot2 builds on the concept of the \"Grammar of Graphics\" (Wilkinson 2005, Bertin 1983) which describes a consistent syntax for the construction of a wide range of complex graphics by a concise description of their components.\n\n---\n\n# Why use ggplot2\n\nThe structured syntax and high level of abstraction used by ggplot2 should allow for the user to concentrate on the visualisations instead of creating the underlying code.\n\nOn top of this central philosophy ggplot2 has:\n\n- Increased flexible over many plotting systems.\n- An advanced theme system for professional/publication level graphics.\n- Large developer base -- Many libraries extending its flexibility.\n- Large user base -- Great documentation and active mailing list.\n\n---\n\n# Grammar of Graphics\n\n<div align=\"center\">\n<img src=\"imgs/Slide1.jpg\" alt=\"igv\" height=\"500\" width=\"300\">\n</div>\n\n---\n\n## How ggplot2 builds a plot.\n\n<!-- ![](imgs/Slide2.jpg) -->\n<div align=\"center\">\n<img src=\"imgs/Slide2.jpg\" alt=\"igv\" height=\"500\" width=\"550\">\n</div>\n\n\n---\n\nOverview of example code for the ggplot2 scatter plot.\n\n```{r complex,eval=F}\n\nggplot(data = <default data set>, \n       aes(x = <default x axis variable>,\n           y = <default y axis variable>,\n           ... <other default aesthetic mappings>),\n       ... <other plot defaults>) +\n\n       geom_scatter(aes(size = <size variable for this geom>, \n                      ... <other aesthetic mappings>),\n                  data = <data for this point geom>,\n                  stat = <statistic string or function>,\n                  position = <position string or function>,\n                  color = <\"fixed color specification\">,\n                  <other arguments, possibly passed to the _stat_ function) +\n\n  scale_<aesthetic>_<type>(name = <\"scale label\">,\n                     breaks = <where to put tick marks>,\n                     labels = <labels for tick marks>,\n                     ... <other options for the scale>) +\n  \n  ggtitle(\"Graphics/Plot\")+\n  xlab(\"Weight\")+\n  ylab(\"Height\")+\n\n  theme(plot.title = element_text(colour = \"gray\"),\n        ... <other theme elements>)\n    \n```\n---\n## What users are required to specify in ggplot2.\n\n<!-- ![](imgs/Slide3.jpg) -->\n<div align=\"center\">\n<img src=\"imgs/Slide3.jpg\" alt=\"igv\" height=\"500\" width=\"550\">\n</div>\n\n---\nActual code for the ggplot2 scatter plot.\n\n```{r present_cleanEralt, echo=FALSE}\nlibrary(ggplot2)\n\npatients_clean <- read.delim(\"data/patient-data-cleaned.txt\",\n                             sep=\"\\t\")\n\n```\n\n```{r simple,eval=T,warning=FALSE,fig.height=4.5,fig.width=9}\nggplot(data=patients_clean,\n       aes(y=Weight,x=Height,colour=Sex,\n           size=BMI,shape=Pet)) + \n  geom_point()\n\n```\n\n---\n# Getting started with ggplot2\n\n\n```{r load_packages, echo=FALSE, eval=TRUE,warning=F,message=F}\nsuppressPackageStartupMessages(library(tidyr))\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(stringr))\nsuppressPackageStartupMessages(library(lubridate))\n```\n\n\n```{r present_clean}\nlibrary(ggplot2)\n\npatients_clean <- read.delim(\"data/patient-data-cleaned.txt\",\n                             sep=\"\\t\")\n\n```\n---\n## Our first ggplot2 graph\n\nAs seen above, in order to produce a ggplot2 graph we need a minimum of:-\n\n- Data to be used in graph\n- Mappings of data to the graph (aesthetic mapping)\n- What type of graph we want to use (The geom to use).\n\n---\nIn the code below we define the data as our cleaned patients data frame.\n\n```{r ggplot_only,echo=!AsSlides,eval=!AsSlides}\npcPlot <- ggplot(data=patients_clean)\nclass(pcPlot)\npcPlot$data[1:4,]\n```\n\n```{r ggplot_onlyFS1,echo=AsSlides,eval=AsSlides}\npcPlot <- ggplot(data=patients_clean)\nclass(pcPlot)\n```\n\nNow we can see that we have gg/ggplot object (pcPlot).\n---\n\n```{r ggplot_onlyFS2,echo=AsSlides,eval=AsSlides}\npcPlot$data[1:4,]\n```\nWithin this gg/ggplot object the data has been defined.\n\n---\nImportant information on how to map the data to the visual properties (aesthetics) of the plot as well as what type of plot to use (geom) have however yet to specified. \n\n```{r missing_rest}\npcPlot$mapping\npcPlot$theme\npcPlot$layers\n```\n\n---\nThe information to map the data to the plot can be added now using the aes() function.\n```{r ggplot_aes}\npcPlot <- ggplot(data=patients_clean)\n\npcPlot <- pcPlot+aes(x=Height,y=Weight)\n\npcPlot$mapping\npcPlot$theme\npcPlot$layers\n```\n\nBut we are still missing the final component of our plot, the type of plot to use (geom).\n---\nBelow the geom_point function is used to specify a point plot, a scatter plot of Height values on the x-axis versus Weight values on the y values.\n\n```{r ggplot_aes_geom,fig.height=4,fig.width=7,eval=!AsSlides,echo=!AsSlides}\npcPlot <- ggplot(data=patients_clean)\n\npcPlot <- pcPlot+aes(x=Height,y=Weight)\npcPlot <- pcPlot+geom_point()\npcPlot\npcPlot$mapping\npcPlot$theme\npcPlot$layers\n\n```\n\n```{r ggplot_aes_geomFS1,fig.height=5,fig.width=8,eval=AsSlides,echo=AsSlides}\npcPlot <- ggplot(data=patients_clean)\n\npcPlot <- pcPlot+aes(x=Height,y=Weight)\npcPlot <- pcPlot+geom_point()\n\n```\n\n---\n\n```{r ggplot_aes_geomFS2,fig.height=5,fig.width=8,eval=AsSlides,echo=AsSlides}\n\npcPlot$mapping\npcPlot$theme\npcPlot$layers\n\n```\n\n\n---\nNow we have all the components of our plot, we need we can display the results.\n\n```{r ggplot_aes_geom_display,fig.height=6,fig.width=8}\npcPlot\n\n```\n---\n\nMore typically, the data and aesthetics are defined within ggplot function and geoms applied afterwards.\n\n```{r ggplot_simple_geom_point, fig.height=6, fig.width=8}\npcPlot <- ggplot(data=patients_clean,\n                 mapping=aes(x=Height,y=Weight))\npcPlot+geom_point()\n```\n---\n\n# Geoms - Plot types\n\nAs we have seen, an important element of a ggplot is the geom used. Following the specification of data, the geom describes the type of plot used.\n\nSeveral geoms are available in ggplot2:-\n\n* geom_point() - Scatter plots\n* geom_line() - Line plots\n* geom_smooth() - Fitted line plots\n* geom_bar() - Bar plots\n* geom_boxplot() - Boxplots\n* geom_jitter() - Jitter to plots\n* geom_histogram() - Histogram plots\n* geom_density() - Density plots\n* geom_text() - Text to plots\n* geom_errorbar() - Errorbars to plots\n* geom_violin() - Violin plots\n\n---\n## Geoms - Line plots\n\n\n\n```{r, line_simple, fig.height=5, fig.width=8}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Height,y=Weight))\n\npcPlot_line <- pcPlot+geom_line() \n\npcPlot_line\n\n```\n---\n```{r, smooth_simple, fig.height=6, fig.width=8}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Height,y=Weight))\n\npcPlot_smooth <- pcPlot+geom_smooth() \n\npcPlot_smooth\n\n```\n---\n\n## Geoms - Bar and frequency plots\n\n```{r, bar_simple, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Sex))\n\npcPlot_bar <- pcPlot+geom_bar() \n\npcPlot_bar\n\n\n```\n---\n\n```{r, histogram_simple, fig.height=6, fig.width=8,warning=FALSE}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Height))\n\npcPlot_hist <- pcPlot+geom_histogram() \n\npcPlot_hist\n\n```\n\n---\n```{r, density_simple, fig.height=6, fig.width=8}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Height))\n\npcPlot_density <- pcPlot+geom_density() \n\npcPlot_density\n\n```\n\n---\n## Geoms - Box and violin plots\n\n```{r, boxplot_simple, fig.height=5, fig.width=8}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Sex,y=Height))\n\npcPlot_boxplot <- pcPlot+geom_boxplot() \n\npcPlot_boxplot\n```\n---\n```{r, violin_simple, fig.height=6, fig.width=8}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Sex,y=Height))\n\npcPlot_violin <- pcPlot+geom_violin() \n\npcPlot_violin\n```\n---\nAn overview of geoms and thier arguments can be found at ggplot2 documentation or within the ggplot2 cheatsheet.\n\n-[ggplot2 documentation](http://docs.ggplot2.org/current/)\n\n-[ggplot2 Cheatsheet](http://sape.inf.usi.ch/quick-reference/ggplot2/geom)\n---\n# Aesthetics\n\nIn order to change the property on an aesthetic of a plot into a constant value (e.g. set colour of all points to red) we can supply the color argument to the geom_point() function.\n\n```{r, scatter_coloured, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 mapping=aes(x=Height,y=Weight))\npcPlot+geom_point(color=\"red\")\n```\n---\n\nAs we discussed earlier however, ggplot2 makes use of aesthetic mappings to assign variables in the data to the properties/aesthetics of the plot. This allows the properties of the plot to reflect variables in the data dynamically.\n\nIn these examples we supply additional information to the aes() function to define what information to display and how it is represented in the plot.\n\nFirst we can recreate the plot we saw earlier.\n\n```{r, scatter_simple, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 mapping=aes(x=Height,y=Weight))\npcPlot+geom_point()\n```\n---\nNow we can adjust the aes mapping by supplying an argument to the colour parameter in the aes function. (Note that ggplot2 accepts \"color\" or \"colour\" as parameter name)\n\n\nThis simple adjustment allows for identifaction of the separation between male and female measurements for height and weight.\n\n```{r, scatter_aes_sexColour, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 mapping=aes(x=Height,y=Weight,colour=Sex))\npcPlot+geom_point()\n```\n---\nSimilarly the shape of points may be adjusted.\n\n```{r, scatter_aes_sexShape, fig.height=6, fig.width=9,eval=F,echo=T}\npcPlot <- ggplot(data=patients_clean,\n                 mapping=aes(x=Height,y=Weight,shape=Sex))\npcPlot+geom_point()\n```\n\n```{r, scatter_aes_sexShapeB, fig.height=6, fig.width=9,eval=T,echo=FALSE}\npcPlot <- ggplot(data=patients_clean,\n                 mapping=aes(x=Height,y=Weight,shape=Sex))\npcPlot+geom_point(size=2)\n```\n---\nThe aesthetic mappings may be set directly in the geom_points() function as previously when specifying red. This can allow the same ggplot object to be used by different aesethetic mappings and varying geoms\n\n```{r, aes_in_geom,eval=!AsSlides,echo=!AsSlides}\npcPlot <- ggplot(data=patients_clean)\npcPlot+geom_point(aes(x=Height,y=Weight,colour=Sex))\npcPlot+geom_point(aes(x=Height,y=Weight,colour=Smokes))\npcPlot+geom_point(aes(x=Height,y=Weight,colour=Smokes,shape=Sex))\npcPlot+geom_violin(aes(x=Sex,y=Height,fill=Smokes))\n```\n\n```{r, aes_in_geomFS1,eval=AsSlides,echo=AsSlides}\npcPlot <- ggplot(data=patients_clean)\n```\n---\n```{r, aes_in_geomFS2,eval=AsSlides,echo=AsSlides}\npcPlot+geom_point(aes(x=Height,y=Weight,colour=Sex))\n```\n---\n```{r, aes_in_geomFS3,eval=AsSlides,echo=AsSlides}\npcPlot+geom_point(aes(x=Height,y=Weight,colour=Smokes))\n```\n---\n```{r, aes_in_geomFS4,eval=AsSlides,echo=AsSlides}\npcPlot+geom_point(aes(x=Height,y=Weight,colour=Smokes,shape=Sex))\n```\n---\n```{r, aes_in_geomFS5,eval=AsSlides,echo=AsSlides}\npcPlot+geom_violin(aes(x=Sex,y=Height,fill=Smokes))\n```\n\n---\n\nAgain, for a comprehensive list of parameters and aesthetic mappings used in geom_*type*  functions see the ggplot2 documentation for individual geoms by using ?geom_*type*\n\n```{r, helpforArguments}\n?geom_point\n```\n\nor visit the ggplot2 documentations pages and cheatsheet\n\n- [ggplot2 documentation](http://docs.ggplot2.org/current/)\n\n- [Cheatsheet](http://sape.inf.usi.ch/quick-reference/ggplot2/geom)\n\n---\n\n# Facets\n\nOne very useful feature of ggplot is faceting. \nThis allows you to produce plots subset by variables in your data.\n\nTo facet our data into multiple plots we can use the *facet_wrap* or *facet_grid* function specifying the variable we split by.\n\nThe *facet_grid* function is well suited to splitting the data by two factors.\n\n---\n\nHere we can plot the data with the Smokes variable as rows and Sex variable as columns.\n\n<div align=\"center\">\nfacet_grid(Rows~Columns)\n</div>\n\n```{r, facet_grid_SmokesBySex, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Height,y=Weight,\n                                         colour=Sex))+geom_point()\npcPlot + facet_grid(Smokes~Sex)\n```\n\n---\n\nTo split by one factor we can apply the facet_grid() function ommiting the variable before the \"~\"\" to facet along columns in plot.\n\n<div align=\"center\">\nfacet_grid(~Columns)\n</div> \n```{r, facet_grid_BySex, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Height,y=Weight,\n                                         colour=Sex))+geom_point()\npcPlot + facet_grid(~Sex)\n```\n\n---\n\nTo split along rows in plot, the variable is placed before the \"~.\".\n\n<div align=\"center\">\nfacet_grid(Rows~.)\n</div> \n\n```{r, facet_grid_SexBy, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Height,y=Weight,\n                                         colour=Sex))+geom_point()\npcPlot + facet_grid(Sex~.)\n```\n\n---\nThe *facet_wrap()* function offers a less grid based structure but is well suited to faceting data by one variable.\n\nFor *facet_wrap()* we follow as similar syntax to *facet_grid()*\n\n```{r, facet_Wrap_BySmokes, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Height,y=Weight,\n                                         colour=Sex))+geom_point()\npcPlot + facet_wrap(~Smokes)\n```\n---\nFor more complex faceting both *facet_grid* and *facet_wrap* can accept combinations of variables.\n\nUsing *facet_wrap*\n```{r, facet_wrap_smokesBySexandPet, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Height,y=Weight,\n                                         colour=Sex))+geom_point()\npcPlot + facet_wrap(~Pet+Smokes+Sex)\n```\n---\nOr in a nice grid format using facet_grid() and the Smokes variable against a combination of Gender and Pet.\n\n```{r, facet_grid_smokesBySexandPet, fig.height=6, fig.width=9}\npcPlot + facet_grid(Smokes~Sex+Pet)\n```\n\n---\n# Change the plotting order in a boxplot\n\nWe will shortly discuss how to change various aspects of the plot layout and appearance. However, a common-asked question is how to change the order in which R plots a categorical variable. Consider the boxplot to compare weights of males and females:-\n\n```{r, fig.height=4, fig.width=9}\nggplot(patients_clean, aes(x=Sex, y=Weight)) + geom_boxplot()\n```\n---\nHere, R decides the order to arrange the boxes according to the `levels` of the categorical variable. By default this is the alphabetical order. i.e. Female before Male.\n\n```{r}\nsummary(patients_clean$Sex)\n```\n---\nDepending on the message we want the plot to convey, we might want control over the order of boxes. The `factor` functions allows us to explictly change the order of the levels.\n\n```{r, fig.height=4, fig.width=9}\npatients_clean$Sex <- factor(patients_clean$Sex, \n                             levels=c(\"Male\",\"Female\"))\nggplot(patients_clean,aes(x=Sex, y=Weight)) + geom_boxplot()\n```\n\n\n\n```{r,echo=FALSE,eval=FALSE}\npatients_clean %>% \n  mutate(Sex = factor(Sex,levels=c(\"Male\",\"Female\"))) %>% \n  ggplot(aes(x=Sex, y=Weight)) + geom_boxplot()\n```\n\n---\n\n# Exercise set 1\n\n[Link_to_exercises](../../exercises/exercise_1.html)\n\n[Link_to_answers](../../answers/exercise_1.html)\n\n---\n\n# Scales\n\nScales and their legends have so far been handled using ggplot2 defaults.\nggplot2 offers functionality to have finer control over scales and legends using the *scale* methods.\n\nScale methods are divided into functions by combinations of \n\n* the aesthetics they control.\n\n* the type of data mapped to scale.\n\n \n  scale_aesthetic_type\n  \n  Try typing in scale_ then *tab* to autocomplete. This will provide some examples of the scale functions available in ggplot2.\n\n---\nAlthough different *scale* functions accept some variety in their arguments, common arguments to scale functions include - \n\n- name - The axis or legend title\n\n- limits - Minimum and maximum of the scale\n\n- breaks - Label/tick positions along an axis\n\n- labels - Label names at each break\n\n---\n## Controlling the X and Y scale.\n\nBoth continous and discrete X/Y scales can be controlled in ggplot2 using the\n\nscale_**(x/y)**_**(continous/discrete)**\n\n---\nIn this example we control the continuous sale on the x-axis by providing a name, X-axis limits, the positions of breaks (ticks/labels) and the  labels to place at breaks.\n\n```{r, facet_grid_smokesBySex_scalex, fig.height=4.5, fig.width=9}\n\npcPlot +\n  geom_point() +\n  facet_grid(Smokes~Sex)+\n  scale_x_continuous(name=\"height ('cm')\",\n                     limits = c(100,200),\n                     breaks=c(125,150,175),\n                     labels=c(\"small\",\"justright\",\"tall\"))\n\n```\n---\nSimilary control over discrete scales is shown below.\n\n```{r, facet_grid_smokesBySex_scaleDisceteX, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Sex,y=Height))\npcPlot +\n  geom_violin(aes(x=Sex,y=Height)) +\n  scale_x_discrete(labels=c(\"Women\", \"Men\"))\n\n```\n---\nMultiple X/Y scales can be combined to give full control of axis marks.\n\n```{r, facet_grid_smokesBySex_scaleDisceteXContinuousY, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,aes(x=Sex,y=Height,fill=Smokes))\npcPlot +\n  geom_violin(aes(x=Sex,y=Height)) +\n  scale_x_discrete(labels=c(\"Women\", \"Men\"))+\n  scale_y_continuous(breaks=c(160,180),labels=c(\"Short\", \"Tall\"))\n```\n---\n## Controlling other scales.\nWhen using fill,colour,linetype, shape, size or alpha aesthetic mappings the scales are automatically selected for you and the appropriate legends created.\n\n```{r, facet_grid_height_weight, fig.height=3, fig.width=8}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=Sex))\npcPlot + geom_point(size=4)\n                  \n```\n\nIn the above example the discrete colours for the Sex variable was selected by default.\n---\n### Manual discrete colour scale\n\nManual control of discrete variables can be performed using scale_*aes_Of_Interest*_**manual** with the *values* parameter.\nAdditionally in this example an updated name for the legend is provided.\n\n```{r, facet_grid_height_weight_manualScale, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=Sex))\npcPlot + geom_point(size=4) + \n  scale_color_manual(values = c(\"Green\",\"Purple\"),\n                     name=\"Gender\")\n                  \n```\n---\n### Colorbrewer for discrete colour scale\n\nHere we have specified the colours to be used (hence the manual) but when the number of levels to a variable are high this may be impractical and often we would like ggplot2 to choose colours from a scale of our choice.\n\nThe brewer set of scale functions allow the user to make use of a range of palettes available from colorbrewer.\n\n- **Diverging**\n\n *BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral*\n\n- **Qualitative**\n\n *Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3*\n\n- **Sequential**\n\n *Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd*\n\n---\n```{r, facet_grid_height_weight_brewerScale, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=Pet))\npcPlot + geom_point(size=4) + \n  scale_color_brewer(palette = \"Set2\")\n                  \n```\n---\nFor more details on palette sizes and styles visit the colorbrewer website and ggplot2 reference page.\n\n- [colorbrewer](http://colorbrewer2.org/)\n\n- [ggplot2 colour scales](http://docs.ggplot2.org/current/scale_brewer.html)\n---\n### Continuous colour scales\n\nSo far we have looked a qualitative scales but ggplot2 offers much functionality for continuous scales such as for size, alpha (transparancy), colour and fill.\n\n- scale_alpha_continuous() - For Transparancy\n\n- scale_size_continuous() - For control of size.\n\n---\nBoth these functions accept the range of alpha/size to be used in plotting.\n\nBelow the range of alpha to be used in plot is limited to between 0.5 and 1\n\n```{r, facet_grid_height_weight_BMIalpha, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,alpha=BMI))\npcPlot + geom_point(size=4) + \n  scale_alpha_continuous(range = c(0.5,1))\n                  \n```\n---\nBelow the range of sizes to be used in plot is limited to between 3 and 6\n```{r, facet_grid_height_weight_BMIsize, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,size=BMI))\npcPlot + geom_point(alpha=0.8) + \n  scale_size_continuous(range = c(3,6))\n                  \n```\n---\nThe limits of the scale can also be controlled but it is important to note data outside of scale is removed from plot.\n\n```{r, facet_grid_height_weight_BMIsizeLimits, fig.height=4, fig.width=9,warning=FALSE}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,size=BMI))\npcPlot + geom_point() + scale_size_continuous(range = c(3,6),\n                                              limits = c(25,40))\n                  \n```\n\n---\nWhat points of scale to be labeled and labels text  can also be controlled.\n\n```{r, facet_grid_height_weight_BMIsizewithBreaks, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,size=BMI))\npcPlot + geom_point() + \n  scale_size_continuous(range = c(3,6), \n                        breaks=c(25,30), \n                        labels=c(\"Good\",\"Good but not 25\"))\n```\n\n---\nControl of colour/fill scales can be best achieved through the **gradient** subfunctions of scale.\n\n- scale_(colour/fill)_*gradient* - 2 colour gradient (eg. low to high BMI)\n\n- scale_(colour/fill)_*gradient2* - Diverging colour scale with a midpoint colour (e.g. Down, No Change, Up)\n\nBoth functions take a common set of arguments:-\n\n- low - Colour for low end of gradient scale\n- high - Colour for high end of gradient scale.\n- na.value - Colour for any NA values.\n\n---\nAn example using scale_colour_gradient below sets the low and high end colours to White and Red respectively\n\n```{r, facet_grid_height_weight_BMIgradient, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=BMI))\npcPlot + geom_point(size=4,alpha=0.8) + \n  scale_colour_gradient(low = \"White\",high=\"Red\")\n                  \n```\n---\nSimilarly we can use the scale_colour_gradient2 function which allows for the specification of a midpoint value and its associated colour.\n\n```{r, facet_grid_height_weight_BMIgradient2, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=BMI))\npcPlot + geom_point(size=4,alpha=0.8) + \n  scale_colour_gradient2(low = \"Blue\",mid=\"Black\", high=\"Red\",\n                         midpoint = median(patients_clean$BMI))\n```\n---\nAs with previous continous scales, limits and custom labels in scale legend can be added.\n\n```{r, facet_grid_height_weight_BMIgradient2plus, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=BMI))\npcPlot + geom_point(size=4,alpha=0.8) + \n  scale_colour_gradient2(low = \"Blue\",\n                         mid=\"Black\",\n                         high=\"Red\",\n                         midpoint = median(patients_clean$BMI),\n                         breaks=c(25,30),labels=c(\"Low\",\"High\"),\n                         name=\"Body Mass Index\")\n```\n---\nMultiple scales may be combined to create high customisable plots and scales\n\n```{r, facet_grid_smokesBySex_scaleDisceteXContinuouswY, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n                 aes(x=Height,y=Weight,colour=BMI,shape=Sex))\npcPlot + geom_point(size=4,alpha=0.8)+ \n  scale_shape_discrete(name=\"Gender\") +\n  scale_colour_gradient2(low = \"Blue\",mid=\"Black\",high=\"Red\",\n                         midpoint = median(patients_clean$BMI),\n                         breaks=c(25,30),labels=c(\"Low\",\"High\"),\n                         name=\"Body Mass Index\")\n```\n\n---\n# Statistical transformations.\n\nIn ggplot2 many of the statistical transformations are performed without any direct specification e.g. geom_histogram() will use stat_bin() function to generate bin counts to be used in plot.\n\nAn example of statistical methods in ggplot2 which are very useful include the stat_smooth() and stat_summary() functions.\n\n---\n\nThe stat_smooth() function can be used to fit a line to the data being displayed.\n\n```{r, stat_smooth, fig.height=5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))\npcPlot+geom_point()+stat_smooth()\n```\n---\nBy default a \"loess\" smooth line is plotted by stat_smooth. Other methods available include lm, glm,gam,rlm.\n\n```{r, stat_smoothlm, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))\npcPlot+geom_point()+stat_smooth(method=\"lm\")\n```\n---\nA useful feature of ggplot2 is that it uses previously defined grouping when performing smoothing.\n\nIf colour by Sex is an aesthetic mapping then two smooth lines are drawn, one for each sex.\n\n```{r, stat_smoothlmgroups, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height,colour=Sex))\npcPlot+geom_point()+stat_smooth(method=\"lm\")\n```\n---\nThis behaviour can be overridden by specifying an aes within the stat_smooth() function and setting inherit.aes to FALSE.\n\n```{r, stat_smoothlmgroupsOverridden, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height,colour=Sex))\npcPlot+geom_point()+stat_smooth(aes(x=Weight,y=Height),method=\"lm\",\n                                inherit.aes = F)\n```\n---\nAnother useful method is stat_summary() which allows for a custom statistical function to be performed and then visualised.\n\nThe fun.y parameter specifies a function to apply to the y variables for every value of x.\n\nIn this example we use it to plot the quantiles of the Female and Male Height data\n\n```{r, stat_summary, fig.height=3.5, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Sex,y=Height))+geom_jitter()\npcPlot+stat_summary(fun.y=quantile,geom=\"point\",\n                    colour=\"purple\",size=8)\n```\n---\n# Themes\n\n\nThemes specify the details of data independent elements of the plot. \nThis includes titles, background colour, text fonts etc.\n\nThe graphs created so far have all used the default themes, `theme_grey()`, \nbut ggplot2 allows for the specification of theme used.\n---\n## Predefined themes\n\nPredefined themes can be applied to a ggplot2 object using a family of functions theme_*style*()\n\nIn the example below the minimal theme is applied to the scatter plot seen earlier.\n\n```{r, theme_minimal, fig.height=4, fig.width=9}\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+geom_point()\npcPlot+theme_minimal()\n```\n---\nSeveral predifined themes are available within ggplot2 including:\n\n- theme_bw\n\n- theme_classic\n\n- theme_dark\n\n- theme_gray\n\n- theme_light\n\n- theme_linedraw\n\n- theme_minimal\n\nPackages such as [ggthemes](https://github.com/jrnold/ggthemes) also contain many useful collections of predined theme_*style* functions.\n\n---\n## Creating your themes\n\nAs well as making use of predifened theme styles, ggplot2 allows for control over the attributes and elements within a plot through a collection of related functions and attributes.\n\n**theme()** is the global function used to set attributes for the collections of elements/components making up the current plot.\n\nWithin the theme functions there are 4 general graphic elements which may be controlled:-\n\n- rect\n- line\n- text\n- title\n\n---\n\nand 5 groups of related elements:-\n\n- axis\n- legend\n- strip\n- panel (plot panel)\n- plot (Global plot parameters)\n\n---\n\nThese elements may be specified by the use of their appropriate element functions including:\n\n- element_line()\n- element_text()\n- element_rect()\n\nand additionally element_blank() to set an element to \"blank\"\n\n---\n\nA detailed description of controlling elements within a theme can be seen at the ggplot2 vignette and by typing *?theme* into the console.\n\n- [ggplot2 themes](http://docs.ggplot2.org/dev/vignettes/themes.html)\n\n---\nTo demonstrate customising a theme, in the example below we alter one element of theme. Here we will change the text colour for the plot.\n\n- Note because we are changing a *text* element we use the *element_text()* function.\n\nA detailed description of which elements are available and their associated element functions can be found by typing *?theme*.\n\n```{r, theme_custom, fig.height=3, fig.width=9}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+geom_point()\npcPlot+theme(\n            text = element_text(colour=\"red\"),\n            axis.text = element_text(colour=\"red\")\n           )\n```\n\n\n---\n\nIf we wished to set the y-axis label to be at an angle we can adjust that as well.\n\n```{r, theme_custom1, fig.height=3, fig.width=9}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+geom_point()\npcPlot+theme(\n            text = element_text(colour=\"red\"),\n            axis.text = element_text(colour=\"red\"),\n            axis.title.y = element_text(angle=0)\n           )\n```\n---\nFinally we may wish to remove axis line, set the background of plot panels to be white and give the strips (title above facet) a cyan background colour.\n\n```{r, theme_custom2, fig.height=3, fig.width=9}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+\n  geom_point()+\n  facet_grid(Sex~Smokes)\npcPlot+theme(\n            text = element_text(colour=\"red\"),\n            axis.text = element_text(colour=\"red\"),\n            axis.title.y = element_text(angle=0),\n            axis.line = element_line(linetype = 0),\n            panel.background=element_rect(fill=\"white\"),\n            strip.background=element_rect(fill=\"cyan\")\n           )\n```\n---\n\n## + and %+replace%\n\nWhen altering themes we have been using the **+** operator to add themes as we would adding geoms,scales and stats.\n\nWhen using the **+** operator \n\n- Themes elements specified in new scheme replace elements in old theme \n\n- Theme elements in the old theme which have not been specified in new theme are maintained.\n\nThis makes the **+** operator useful for building up from old themes.\n---\nIn the example below, we maintain all elements set by theme_bw() but overwrite the theme element attribute of the colour of text.\n```{r, theme_custom8, fig.height=4, fig.width=9}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+geom_point()\npcPlot+\n  theme_bw()+\n  theme(text = element_text(colour=\"red\"))\n```\n---\nThe consequence can be seen comparing the effect of theme() on a plot with a default theme or theme_minimal.\n\nSince the default theme, theme_grey() contains a specification for axis.text colour, i will not replace it with \"+\" operator. \n\n```{r, theme_customMiniVsBWDuck,echo=T,eval=F,collapse=TRUE}\npcPlot+\n  theme(text = element_text(colour=\"red\"))\n\npcPlot+\n  theme_minimal()+\n  theme(text = element_text(colour=\"red\"))\n```\n\n```{r, theme_customMiniVsBW,echo=F,eval=T,collapse=FALSE,fig.height=4, fig.width=9,message=FALSE,warning=FALSE}\nlibrary(gridExtra)\np <- pcPlot+\n  theme(text = element_text(colour=\"red\"))\n\np2 <- pcPlot+\n  theme_minimal()+\n  theme(text = element_text(colour=\"red\"))\ngrid.arrange(p, p2, ncol=2)\n```\n---\n\n\n\nIn contrast **%+replace%** replaces all elements within a theme regardless of whether they have been previously specfied in old theme.\n\nWhen using the **%+replace%** operator \n\n- Theme elements specified in new scheme replace elements in old theme \n\n- Theme elements in the old theme which have not been specified in new theme are also replaced by blank theme elements.\n\n```{r, theme_custom84,echo=!AsSlides,eval=!AsSlides}\n  oldTheme <- theme_bw()\n  \n  newTheme_Plus <- theme_bw() +\n  theme(text = element_text(colour=\"red\"))\n  \n  newTheme_Replace <- theme_bw() %+replace%\n  theme(text = element_text(colour=\"red\"))\n  \n  oldTheme$text\n  newTheme_Plus$text\n  newTheme_Replace$text\n```\n\n```{r, theme_custom84FS1,echo=AsSlides,eval=AsSlides}\n  oldTheme <- theme_bw()\n  \n  newTheme_Plus <- theme_bw() +\n  theme(text = element_text(colour=\"red\"))\n  \n  newTheme_Replace <- theme_bw() %+replace%\n  theme(text = element_text(colour=\"red\"))\n```\n---\n```{r, theme_custom84FS2,echo=AsSlides,eval=AsSlides}\n  \n  oldTheme$text\n```\n---\n```{r, theme_custom84FS3,echo=AsSlides,eval=AsSlides}\n  \n  newTheme_Plus$text\n```\n---\n```{r, theme_custom84FS4,echo=AsSlides,eval=AsSlides}\n\n  newTheme_Replace$text\n```\n\n---\nThis means that %+replace% is most useful when creating new themes.\n\n\ntheme_get and theme_set\n---\n# Adding titles for plot and labels.\n\nSo far no plot titles have been specified. Plot titles can be specified using the labs functions.\n\n```{r, theme_labs,fig.height=4, fig.width=9,}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+geom_point()\npcPlot+labs(title=\"Weight vs Height\",y=\"Height (cm)\")\n```\n---\nor specified using the ggtitle and xlab/ylab functions.\n\n```{r, theme_ggtitle,fig.height=4, fig.width=9,}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Height,y=Weight))+geom_point()\npcPlot+ggtitle(\"Weight vs Height\")+ylab(\"Height (cm)\")\n```\n---\n## Saving plots\n\nPlots produced by ggplot can be saved from the interactive viewer as with standard plots.\n\nThe ggsave() function allows for additional arguments to be specified including the type, resolution and size of plot.\n\nBy default ggsave() will use the size of your current graphics window when saving plots so it may be important to specify width and height arguments desired. \n\n```{r, ggsaving, eval=FALSE,fig.height=4, fig.width=9,}\n\npcPlot <- ggplot(data=patients_clean,\n        mapping=aes(x=Weight,y=Height))+geom_point()\nggsave(pcPlot,filename = \"anExampleplot.png\",width = 15,\n       height = 15,units = \"cm\")\n```\n---\n\n# Exercise set 2\n\n\n# Exercise set 2\n\n[Link_to_exercises](../../exercises/exercise_2.html)\n\n[Link_to_answers](../../answers/exercise_2.html)\n\n---\n# References.\n\n- [Layered grammar of graphics](http://vita.had.co.nz/papers/layered-grammar.pdf)\n\n- [ggplot2 documentation](http://docs.ggplot2.org/current/)\n\n- [ggplot2 wiki](https://github.com/hadley/ggplot2/wiki)\n\n- [ggplot2 mailing list](http://groups.google.com/group/ggplot2)\n\n\n- [Cheatsheet](http://sape.inf.usi.ch/quick-reference/ggplot2/geom)\n\n- [Even more material](http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html)\n\n\n",
    "created" : 1521410631766.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2254665358",
    "id" : "AAF83B03",
    "lastKnownWriteTime" : 1521417715,
    "last_content_update" : 1521417715501,
    "path" : "~/Projects/Software/Github/New_RUPlotting_In_R/r_course/ggplot2.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}